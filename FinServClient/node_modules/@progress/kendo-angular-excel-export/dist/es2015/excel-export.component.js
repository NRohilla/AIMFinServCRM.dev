import * as tslib_1 from "tslib";
import { Component, ContentChildren, Input, QueryList, Inject, Optional } from '@angular/core';
import { saveAs } from '@progress/kendo-file-saver';
import { RTL } from '@progress/kendo-angular-l10n';
import { workbookOptions, toDataURL, isWorkbookOptions } from './ooxml/workbook';
import { ColumnBase } from './columns/column-base';
/**
 * Configures the settings for the Excel export of the Kendo UI Grid.
 */
let ExcelExportComponent = class ExcelExportComponent {
    constructor(rtl) {
        this.rtl = rtl;
        /**
         * Specifies the file name of the file exported to Excel.
         * @default "Export.xlsx"
         */
        this.fileName = 'Export.xlsx';
        /**
         * @hidden
         */
        this.columns = new QueryList();
        this.saveFile = this.saveFile.bind(this);
    }
    /**
     * Saves the data to Excel.
     *
     * @param exportData - An optional parameter. Can be the data that is to be exported or [`WorkbookOptions`]({% slug api_excel-export_workbookoptions %}).
     */
    save(exportData) {
        this.toDataURL(exportData).then(this.saveFile);
    }
    /**
     * Returns [`WorkbookOptions`]({% slug api_excel-export_workbookoptions %}) based on the specified columns and data.
     *
     * @param exportData - The optional data to be exported.
     * @returns {WorkbookOptions} - The workbook options.
     */
    workbookOptions(exportData) {
        const currentData = this.getExportData(exportData);
        const options = workbookOptions({
            columns: this.columns,
            data: currentData.data,
            group: currentData.group,
            filterable: this.filterable,
            creator: this.creator,
            date: this.date,
            rtl: this.rtl,
            paddingCellOptions: this.paddingCellOptions,
            headerPaddingCellOptions: this.headerPaddingCellOptions
        });
        return options;
    }
    /**
     * Returns a promise which will be resolved with the file data URI.
     *
     * @param exportData - The optional data or [`WorkbookOptions`]({% slug api_excel-export_workbookoptions %}) that are to be used to generate the data URI.
     * @returns {Promise<string>} - The promise that will be resolved by the file data URI.
     */
    toDataURL(exportData) {
        const options = isWorkbookOptions(exportData) ?
            exportData :
            this.workbookOptions(exportData);
        return toDataURL(options);
    }
    getExportData(exportData) {
        let result;
        if (exportData) {
            if (Array.isArray(exportData)) {
                result = {
                    data: exportData
                };
            }
            else {
                result = exportData;
            }
        }
        else {
            result = {
                data: this.data,
                group: this.group
            };
        }
        return result;
    }
    saveFile(dataURL) {
        saveAs(dataURL, this.fileName, {
            forceProxy: this.forceProxy,
            proxyURL: this.proxyURL
        });
    }
};
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String)
], ExcelExportComponent.prototype, "fileName", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Boolean)
], ExcelExportComponent.prototype, "filterable", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String)
], ExcelExportComponent.prototype, "creator", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Date)
], ExcelExportComponent.prototype, "date", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Boolean)
], ExcelExportComponent.prototype, "forceProxy", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String)
], ExcelExportComponent.prototype, "proxyURL", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Array)
], ExcelExportComponent.prototype, "data", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Array)
], ExcelExportComponent.prototype, "group", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], ExcelExportComponent.prototype, "paddingCellOptions", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], ExcelExportComponent.prototype, "headerPaddingCellOptions", void 0);
tslib_1.__decorate([
    ContentChildren(ColumnBase, { descendants: true }),
    tslib_1.__metadata("design:type", QueryList)
], ExcelExportComponent.prototype, "columns", void 0);
ExcelExportComponent = tslib_1.__decorate([
    Component({
        exportAs: 'kendoExcelExport',
        selector: 'kendo-excelexport',
        template: ``
    }),
    tslib_1.__param(0, Optional()), tslib_1.__param(0, Inject(RTL)),
    tslib_1.__metadata("design:paramtypes", [Boolean])
], ExcelExportComponent);
export { ExcelExportComponent };
