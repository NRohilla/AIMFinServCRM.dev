import * as tslib_1 from "tslib";
import { ElementRef, Renderer2, Component, EventEmitter, HostBinding, HostListener, Inject, Input, Optional, Output, ViewChild, forwardRef } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { L10N_PREFIX, LocalizationService, RTL } from '@progress/kendo-angular-l10n';
import { Keys } from '../common/enums';
import { SwitchController } from '@telerik/kendo-inputs-common';
import { guid } from '../common/dom-utils';
/**
 * Represents the Kendo UI Switch component for Angular.
 */
var SwitchComponent = /** @class */ (function () {
    function SwitchComponent(rtl, renderer, hostElement, localizationService) {
        var _this = this;
        this.rtl = rtl;
        this.renderer = renderer;
        this.hostElement = hostElement;
        this.localizationService = localizationService;
        /**
         * @hidden
         */
        this.id = guid();
        /**
         * Sets the current value of the Switch when initially displayed.
         */
        this.checked = false;
        /**
         * Disables the Switch when set to `true`.
         */
        this.disabled = false;
        /**
         * Specifies the [`tabindex`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex) of the component.
         */
        this.tabindex = 0;
        /**
         * Fires each time the user focuses the input element.
         */
        this.onFocus = new EventEmitter(); //tslint:disable-line:no-output-rename
        /**
         * Fires each time the input element gets blurred.
         */
        this.onBlur = new EventEmitter(); //tslint:disable-line:no-output-rename
        /**
         * Fires each time the user selects a new value.
         */
        this.valueChange = new EventEmitter();
        this.ngChange = function (_) { };
        this.ngTouched = function () { };
        /**
         * @hidden
         */
        this.changeValue = function (value) {
            _this.checked = value;
            _this.ngChange(value);
            _this.valueChange.emit(value);
        };
        this.keyDownHandler = function (event) {
            var keyCode = event.keyCode;
            if (keyCode === Keys.space || keyCode === Keys.enter) {
                _this.controller.change(!_this.checked);
                event.preventDefault();
            }
        };
        this.ifEnabled = function (callback, event) {
            if (!_this.disabled) {
                callback(event);
            }
        };
        this.applyStyle = function (props) {
            Object.keys(props).forEach(function (x) {
                _this.dragHandle.nativeElement.style[x] = props[x];
            });
        };
        this.updateView = function (elements) {
            if (_this.isDocumentAvailable()) {
                _this.applyStyle(_this.controller.addAnimation(elements.handle));
            }
        };
        this.direction = rtl ? 'rtl' : 'ltr';
        this.controller = new SwitchController(this.updateView, this.changeValue);
        this.hostElement = hostElement.nativeElement;
    }
    SwitchComponent_1 = SwitchComponent;
    Object.defineProperty(SwitchComponent.prototype, "tabIndex", {
        get: function () {
            return this.tabindex;
        },
        /**
         * @hidden
         */
        set: function (tabIndex) {
            this.tabindex = tabIndex;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SwitchComponent.prototype, "ariaDisabled", {
        get: function () {
            return this.disabled ? true : undefined;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SwitchComponent.prototype, "ariaChecked", {
        get: function () {
            return this.checked ? true : undefined;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SwitchComponent.prototype, "hostClasses", {
        get: function () {
            return true;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SwitchComponent.prototype, "switchOnClass", {
        get: function () {
            return this.checked;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SwitchComponent.prototype, "switchOffClass", {
        get: function () {
            return !this.checked;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SwitchComponent.prototype, "disabledClass", {
        get: function () {
            return this.disabled;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SwitchComponent.prototype, "focusedClass", {
        get: function () {
            return this.focused;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SwitchComponent.prototype, "onLabelMessage", {
        /**
         * @hidden
         */
        get: function () {
            return this.onLabel || this.localizationService.get('on');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SwitchComponent.prototype, "offLabelMessage", {
        /**
         * @hidden
         */
        get: function () {
            return this.offLabel || this.localizationService.get('off');
        },
        enumerable: true,
        configurable: true
    });
    SwitchComponent.prototype.ngOnInit = function () {
        this.renderer.removeAttribute(this.hostElement, "tabindex");
    };
    /**
     * Focuses the Switch component.
     *
     * @example
     * ```ts
     * _@Component({
     * selector: 'my-app',
     * template: `
     *  <button (click)="switch.focus()">Focus</button>
     *  <kendo-switch #switch></kendo-switch>
     * `
     * })
     * class AppComponent { }
     * ```
     */
    SwitchComponent.prototype.focus = function () {
        if (!this.wrapper) {
            return;
        }
        this.wrapper.nativeElement.focus();
    };
    /**
     * Blurs the Switch component.
     */
    SwitchComponent.prototype.blur = function () {
        if (!this.wrapper) {
            return;
        }
        this.wrapper.nativeElement.blur();
    };
    /**
     * @hidden
     *
     * Called when the status of the component changes to or from `disabled`.
     * Depending on the value, it enables or disables the appropriate DOM element.
     */
    SwitchComponent.prototype.setDisabledState = function (isDisabled) {
        this.disabled = isDisabled;
    };
    /**
     * @hidden
     */
    SwitchComponent.prototype.keyDown = function (event) {
        this.ifEnabled(this.keyDownHandler, event);
    };
    /**
     * @hidden
     */
    SwitchComponent.prototype.onResize = function () {
        this.updateState();
    };
    /**
     * @hidden
     */
    SwitchComponent.prototype.handleFocus = function () {
        this.focused = true;
        this.onFocus.emit();
    };
    /**
     * @hidden
     */
    SwitchComponent.prototype.handleBlur = function () {
        this.focused = false;
        this.ngTouched();
        this.onBlur.emit();
    };
    /**
     * @hidden
     */
    SwitchComponent.prototype.ngAfterViewInit = function () {
        var _this = this;
        Promise.resolve().then(function () { return _this.updateState(); });
    };
    /**
     * @hidden
     */
    SwitchComponent.prototype.onHandleDrag = function (event) {
        this.ifEnabled(this.controller.onDrag, event);
    };
    /**
     * @hidden
     */
    SwitchComponent.prototype.onHandlePress = function (event) {
        this.ifEnabled(this.controller.onPress, event);
    };
    /**
     * @hidden
     */
    SwitchComponent.prototype.onHandleRelease = function (event) {
        this.ifEnabled(this.controller.onRelease, event);
    };
    /**
     * @hidden
     */
    SwitchComponent.prototype.writeValue = function (value) {
        this.checked = value === null ? false : value;
        this.updateState();
    };
    /**
     * @hidden
     */
    SwitchComponent.prototype.registerOnChange = function (fn) {
        this.ngChange = fn;
    };
    /**
     * @hidden
     */
    SwitchComponent.prototype.registerOnTouched = function (fn) {
        this.ngTouched = fn;
    };
    SwitchComponent.prototype.isDocumentAvailable = function () {
        return typeof document !== 'undefined';
    };
    SwitchComponent.prototype.updateState = function () {
        if (!this.isDocumentAvailable()) {
            return;
        }
        var rect = this.wrapper.nativeElement.getBoundingClientRect();
        var coordsLeft = rect.left;
        var coordsRight = rect.right;
        var handleElement = this.dragHandle.nativeElement;
        var handleMargin = parseInt(getComputedStyle(handleElement)['margin-right'], 10);
        var handleOffset = handleElement.offsetWidth;
        var wrapperOffset = this.wrapper.nativeElement.offsetWidth;
        if (wrapperOffset === 0) {
            return;
        }
        this.controller.updateState({
            animate: false,
            checked: this.checked,
            coords: {
                left: coordsLeft,
                right: coordsRight
            },
            handleMargin: handleMargin,
            handleOffset: handleOffset,
            reverse: this.rtl,
            wrapperOffset: wrapperOffset
        });
    };
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String)
    ], SwitchComponent.prototype, "id", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String)
    ], SwitchComponent.prototype, "onLabel", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String)
    ], SwitchComponent.prototype, "offLabel", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Boolean)
    ], SwitchComponent.prototype, "checked", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Boolean)
    ], SwitchComponent.prototype, "disabled", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Number)
    ], SwitchComponent.prototype, "tabindex", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [Number])
    ], SwitchComponent.prototype, "tabIndex", null);
    tslib_1.__decorate([
        Output('focus'),
        tslib_1.__metadata("design:type", EventEmitter)
    ], SwitchComponent.prototype, "onFocus", void 0);
    tslib_1.__decorate([
        Output('blur'),
        tslib_1.__metadata("design:type", EventEmitter)
    ], SwitchComponent.prototype, "onBlur", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], SwitchComponent.prototype, "valueChange", void 0);
    tslib_1.__decorate([
        ViewChild('dragHandle'),
        tslib_1.__metadata("design:type", Object)
    ], SwitchComponent.prototype, "dragHandle", void 0);
    tslib_1.__decorate([
        ViewChild('wrapper'),
        tslib_1.__metadata("design:type", Object)
    ], SwitchComponent.prototype, "wrapper", void 0);
    tslib_1.__decorate([
        HostBinding('attr.dir'),
        tslib_1.__metadata("design:type", String)
    ], SwitchComponent.prototype, "direction", void 0);
    tslib_1.__decorate([
        HostBinding('attr.aria-disabled'),
        tslib_1.__metadata("design:type", Boolean),
        tslib_1.__metadata("design:paramtypes", [])
    ], SwitchComponent.prototype, "ariaDisabled", null);
    tslib_1.__decorate([
        HostBinding('attr.aria-checked'),
        tslib_1.__metadata("design:type", Boolean),
        tslib_1.__metadata("design:paramtypes", [])
    ], SwitchComponent.prototype, "ariaChecked", null);
    tslib_1.__decorate([
        HostBinding('class.k-widget'),
        HostBinding('class.k-switch'),
        tslib_1.__metadata("design:type", Boolean),
        tslib_1.__metadata("design:paramtypes", [])
    ], SwitchComponent.prototype, "hostClasses", null);
    tslib_1.__decorate([
        HostBinding('class.k-switch-on'),
        tslib_1.__metadata("design:type", Boolean),
        tslib_1.__metadata("design:paramtypes", [])
    ], SwitchComponent.prototype, "switchOnClass", null);
    tslib_1.__decorate([
        HostBinding('class.k-switch-off'),
        tslib_1.__metadata("design:type", Boolean),
        tslib_1.__metadata("design:paramtypes", [])
    ], SwitchComponent.prototype, "switchOffClass", null);
    tslib_1.__decorate([
        HostBinding('class.k-state-disabled'),
        tslib_1.__metadata("design:type", Boolean),
        tslib_1.__metadata("design:paramtypes", [])
    ], SwitchComponent.prototype, "disabledClass", null);
    tslib_1.__decorate([
        HostBinding('class.k-state-focused'),
        tslib_1.__metadata("design:type", Boolean),
        tslib_1.__metadata("design:paramtypes", [])
    ], SwitchComponent.prototype, "focusedClass", null);
    tslib_1.__decorate([
        HostListener('keydown', ['$event']),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], SwitchComponent.prototype, "keyDown", null);
    SwitchComponent = SwitchComponent_1 = tslib_1.__decorate([
        Component({
            exportAs: 'kendoSwitch',
            providers: [
                LocalizationService,
                { provide: L10N_PREFIX, useValue: 'kendo.switch' },
                { multi: true,
                    provide: NG_VALUE_ACCESSOR,
                    useExisting: forwardRef(function () { return SwitchComponent_1; }) /* tslint:disable-line */
                }
            ],
            selector: 'kendo-switch',
            template: "\n        <ng-container kendoSwitchLocalizedMessages\n            i18n-on=\"kendo.switch.on|The **On** label of the Switch.\"\n            on=\"ON\"\n            i18n-off=\"kendo.switch.off|The **Off** label of the Switch.\"\n            off=\"OFF\"\n        >\n\n        <span class=\"k-switch-wrapper\">\n            <span class=\"k-switch-background\"></span>\n        </span>\n        <span\n            #wrapper\n            kendoDraggable\n            (kendoDrag)=\"onHandleDrag($event)\"\n            (kendoPress)=\"onHandlePress($event)\"\n            (kendoRelease)=\"onHandleRelease($event)\"\n            class=\"k-switch-container\"\n            [id]=\"id\"\n            [attr.tabindex]=\"(disabled ? undefined : tabIndex)\"\n            (focus)=\"handleFocus()\"\n            (blur)=\"handleBlur()\"\n        >\n            <span #dragHandle class=\"k-switch-handle\">\n                <span class=\"k-switch-label-on\">{{onLabelMessage}}</span>\n                <span class=\"k-switch-label-off\">{{offLabelMessage}}</span>\n            </span>\n        </span>\n        <kendo-resize-sensor (resize)=\"onResize()\"></kendo-resize-sensor>\n  "
        }),
        tslib_1.__param(0, Optional()), tslib_1.__param(0, Inject(RTL)),
        tslib_1.__metadata("design:paramtypes", [Boolean, Renderer2,
            ElementRef,
            LocalizationService])
    ], SwitchComponent);
    return SwitchComponent;
    var SwitchComponent_1;
}());
export { SwitchComponent };
