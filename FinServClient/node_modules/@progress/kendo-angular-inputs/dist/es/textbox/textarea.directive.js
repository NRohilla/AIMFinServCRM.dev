import * as tslib_1 from "tslib";
import { Directive, ElementRef, EventEmitter, HostBinding, Output, Renderer2, Optional, Inject } from '@angular/core';
import { RTL } from '@progress/kendo-angular-l10n';
/**
 * Represents the Kendo UI TextArea directive for the Inputs components for Angular.
 * Used to add floating label to any `textarea` element.
 *
 * @example
 * ```ts-no-run
 * <textarea kendoTextArea></textarea>
 * ```
 */
var TextAreaDirective = /** @class */ (function () {
    function TextAreaDirective(renderer, textAreaElement, rtl) {
        this.renderer = renderer;
        this.textAreaElement = textAreaElement;
        /**
         * Fires each time the user focuses the `textarea` element.
         */
        this.onFocus = new EventEmitter(); //tslint:disable-line:no-output-rename
        /**
         * Fires each time the `textarea` element gets blurred.
         */
        this.onBlur = new EventEmitter(); //tslint:disable-line:no-output-rename
        this.listeners = [];
        this.direction = rtl ? 'rtl' : 'ltr';
    }
    Object.defineProperty(TextAreaDirective.prototype, "elementClass", {
        get: function () {
            return true;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TextAreaDirective.prototype, "value", {
        /**
         * Gets the value of the `textarea` element.
         */
        get: function () {
            return this.textAreaElement.nativeElement.value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TextAreaDirective.prototype, "id", {
        get: function () {
            return this.textAreaElement.nativeElement.id;
        },
        set: function (id) {
            this.renderer.setAttribute(this.textAreaElement.nativeElement, 'id', id);
        },
        enumerable: true,
        configurable: true
    });
    TextAreaDirective.prototype.ngAfterViewInit = function () {
        var _this = this;
        var textarea = this.textAreaElement.nativeElement;
        this.listeners = [
            this.renderer.listen(textarea, 'focus', function () { return _this.onFocus.emit(); }),
            this.renderer.listen(textarea, 'blur', function () { return _this.onBlur.emit(); })
        ];
    };
    TextAreaDirective.prototype.ngOnDestroy = function () {
        this.listeners.forEach(function (listener) { return listener(); });
    };
    tslib_1.__decorate([
        HostBinding('class.k-textarea'),
        tslib_1.__metadata("design:type", Boolean),
        tslib_1.__metadata("design:paramtypes", [])
    ], TextAreaDirective.prototype, "elementClass", null);
    tslib_1.__decorate([
        HostBinding('attr.dir'),
        tslib_1.__metadata("design:type", String)
    ], TextAreaDirective.prototype, "direction", void 0);
    tslib_1.__decorate([
        Output('focus'),
        tslib_1.__metadata("design:type", EventEmitter)
    ], TextAreaDirective.prototype, "onFocus", void 0);
    tslib_1.__decorate([
        Output('blur'),
        tslib_1.__metadata("design:type", EventEmitter)
    ], TextAreaDirective.prototype, "onBlur", void 0);
    TextAreaDirective = tslib_1.__decorate([
        Directive({
            selector: 'textarea[kendoTextArea]'
        }),
        tslib_1.__param(2, Optional()), tslib_1.__param(2, Inject(RTL)),
        tslib_1.__metadata("design:paramtypes", [Renderer2,
            ElementRef, Boolean])
    ], TextAreaDirective);
    return TextAreaDirective;
}());
export { TextAreaDirective };
