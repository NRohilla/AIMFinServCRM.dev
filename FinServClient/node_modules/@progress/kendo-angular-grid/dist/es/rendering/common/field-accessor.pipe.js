import * as tslib_1 from "tslib";
/* tslint:disable:pipe-naming */
import { Pipe } from '@angular/core';
import { getter } from '@progress/kendo-data-query';
import { isNullOrEmptyString, isPresent } from '../../utils';
import { IntlService } from '@progress/kendo-angular-intl';
/**
 * @hidden
 */
var FieldAccessorPipe = /** @class */ (function () {
    function FieldAccessorPipe(intlService) {
        this.intlService = intlService;
    }
    FieldAccessorPipe.prototype.transform = function (dataItem, fieldName, format, safe) {
        if (format === void 0) { format = ""; }
        if (safe === void 0) { safe = true; }
        if (!isNullOrEmptyString(fieldName)) {
            var value = getter(fieldName, safe)(dataItem);
            if (isPresent(value) && !isNullOrEmptyString(format)) {
                return this.intlService.format(format, value);
            }
            return value;
        }
        return dataItem;
    };
    FieldAccessorPipe = tslib_1.__decorate([
        Pipe({
            name: 'valueOf',
            pure: false
        }),
        tslib_1.__metadata("design:paramtypes", [IntlService])
    ], FieldAccessorPipe);
    return FieldAccessorPipe;
}());
export { FieldAccessorPipe };
