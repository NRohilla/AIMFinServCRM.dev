import * as tslib_1 from "tslib";
import { Directive, HostListener, HostBinding, Inject, Optional, ElementRef, Renderer2 as Renderer } from '@angular/core';
import { Button } from '@progress/kendo-angular-buttons';
import { RTL } from '@progress/kendo-angular-l10n';
import { EditService } from './edit.service';
import { CELL_CONTEXT } from '../rendering/common/cell-context';
/**
 * Represents the `save` command of the Grid.
 *
 * You can apply this directive to any `button` element inside a
 * [`CommandColumnComponent`]({% slug api_grid_commandcolumncomponent %}).
 *
 * When an associated button with the directive is clicked, the
 * [`save`]({% slug api_grid_gridcomponent %}#toc-save) event
 * is triggered. For more information, refer to the [editing example]({% slug editing_grid %}).
 *
 * @example
 * ```ts-no-run
 * <kendo-grid>
 *   <kendo-grid-command-column title="command">
 *     <ng-template kendoGridCellTemplate>
 *       <button kendoGridSaveCommand>Save changes</button>
 *     </ng-template>
 *   </kendo-grid-command-column>
 * </kendo-grid>
 * ```
 * > When the row is not in the edit mode, the button with `kendoGridSaveCommand` is automatically hidden.
 *
 * You can control the content of the button based on the state of the row.
 * @example
 * ```ts-no-run
 * <kendo-grid>
 *   <kendo-grid-command-column title="command">
 *     <ng-template kendoGridCellTemplate let-isNew="isNew">
 *       <button kendoGridSaveCommand>{{isNew ? 'Add' : 'Update'}}</button>
 *     </ng-template>
 *   </kendo-grid-command-column>
 * </kendo-grid>
 * ```
 */
var SaveCommandDirective = /** @class */ (function (_super) {
    tslib_1.__extends(SaveCommandDirective, _super);
    function SaveCommandDirective(editService, cellContext, element, renderer, rtl) {
        var _this = _super.call(this, element, renderer, null, rtl) || this;
        _this.editService = editService;
        _this.rowIndex = cellContext.rowIndex;
        return _this;
    }
    /**
     * @hidden
     */
    SaveCommandDirective.prototype.click = function () {
        this.editService.save(this.rowIndex);
    };
    Object.defineProperty(SaveCommandDirective.prototype, "visible", {
        /**
         * @hidden
         */
        get: function () {
            return !this.editService.isEdited(this.rowIndex) ? 'none' : '';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SaveCommandDirective.prototype, "buttonClass", {
        /**
         * @hidden
         */
        get: function () {
            return true;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SaveCommandDirective.prototype, "commandClass", {
        /**
         * @hidden
         */
        get: function () {
            return true;
        },
        enumerable: true,
        configurable: true
    });
    tslib_1.__decorate([
        HostListener('click'),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", []),
        tslib_1.__metadata("design:returntype", void 0)
    ], SaveCommandDirective.prototype, "click", null);
    tslib_1.__decorate([
        HostBinding('style.display'),
        tslib_1.__metadata("design:type", String),
        tslib_1.__metadata("design:paramtypes", [])
    ], SaveCommandDirective.prototype, "visible", null);
    tslib_1.__decorate([
        HostBinding('class.k-button'),
        tslib_1.__metadata("design:type", Boolean),
        tslib_1.__metadata("design:paramtypes", [])
    ], SaveCommandDirective.prototype, "buttonClass", null);
    tslib_1.__decorate([
        HostBinding('class.k-grid-save-command'),
        tslib_1.__metadata("design:type", Boolean),
        tslib_1.__metadata("design:paramtypes", [])
    ], SaveCommandDirective.prototype, "commandClass", null);
    SaveCommandDirective = tslib_1.__decorate([
        Directive({
            selector: '[kendoGridSaveCommand]'
        }),
        tslib_1.__param(1, Inject(CELL_CONTEXT)),
        tslib_1.__param(4, Optional()), tslib_1.__param(4, Inject(RTL)),
        tslib_1.__metadata("design:paramtypes", [EditService, Object, ElementRef,
            Renderer, Boolean])
    ], SaveCommandDirective);
    return SaveCommandDirective;
}(Button));
export { SaveCommandDirective };
