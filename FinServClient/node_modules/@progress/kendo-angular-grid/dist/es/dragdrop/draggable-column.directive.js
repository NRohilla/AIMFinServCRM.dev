import * as tslib_1 from "tslib";
import { Directive, ElementRef, EventEmitter, Host, Input, NgZone, Output } from '@angular/core';
import { Subscription } from 'rxjs/Subscription';
import { DraggableDirective } from '../common/draggable.directive';
import { DragAndDropService } from './drag-and-drop.service';
import { DragHintService } from './drag-hint.service';
import { DropCueService } from './drop-cue.service';
import { and, not, or } from '../utils';
import { NavigationService } from '../navigation/navigation.service';
import { of } from 'rxjs/observable/of';
import { takeUntil } from 'rxjs/operators/takeUntil';
import { delay } from 'rxjs/operators/delay';
import { filter } from 'rxjs/operators/filter';
import { tap } from 'rxjs/operators/tap';
import { switchMap } from 'rxjs/operators/switchMap';
import { switchMapTo } from 'rxjs/operators/switchMapTo';
import { map } from 'rxjs/operators/map';
/**
 * @hidden
 */
var stopPropagation = function (event) {
    event.stopPropagation();
    event.preventDefault();
};
/**
 * @hidden
 */
var preventOnDblClick = function (release) { return function (mouseDown) {
    return of(mouseDown).pipe(delay(150), takeUntil(release));
}; };
var hasClass = function (className) { return function (el) { return new RegExp("(^| )" + className + "( |$)").test(el.className); }; };
var isDeleteButton = or(hasClass("k-i-group-delete"), hasClass("k-button-icon"));
var isSortIcon = or(hasClass("k-i-sort-asc-sm"), hasClass("k-i-sort-desc-sm"));
var skipButtons = and(not(isDeleteButton), not(isSortIcon));
var elementUnderCursor = function (_a) {
    var clientX = _a.clientX, clientY = _a.clientY;
    return document.elementFromPoint(clientX, clientY);
};
var hideThenShow = function (element, cont) {
    element.style.display = 'none';
    var result = cont();
    element.style.display = 'block';
    return result;
};
/**
 * @hidden
 */
var DraggableColumnDirective = /** @class */ (function () {
    function DraggableColumnDirective(draggable, element, zone, service, hint, cue, nav) {
        this.draggable = draggable;
        this.element = element;
        this.zone = zone;
        this.service = service;
        this.hint = hint;
        this.cue = cue;
        this.nav = nav;
        this.context = {};
        this.drag = new EventEmitter();
        this.subscriptions = new Subscription();
    }
    Object.defineProperty(DraggableColumnDirective.prototype, "kendoDraggableColumn", {
        set: function (enabled) {
            this.enabled = enabled;
        },
        enumerable: true,
        configurable: true
    });
    DraggableColumnDirective.prototype.ngOnInit = function () {
        var _this = this;
        this.subscriptions.add(this.zone.runOutsideAngular(function () {
            return _this.draggable.kendo.press.pipe(filter(function (_) { return _this.enabled; }), filter(function (_a) {
                var target = _a.originalEvent.target;
                return skipButtons(target);
            }), tap(function (_a) {
                var event = _a.originalEvent;
                stopPropagation(event);
                _this.nav.navigateTo(event.target);
            }), switchMap(preventOnDblClick(_this.draggable.kendo.release)), tap(function (down) {
                _this.hint.create(down, _this.element.nativeElement, _this.context.hint);
                _this.cue.create();
            }), switchMap(function (down) {
                return _this.draggable.kendo.drag.pipe(tap(_this.hint.attach()), tap(_this.cue.attach()), takeUntil(_this.draggable.kendo.release), map(function (move) { return ({ move: move, down: down }); }));
            }), tap(_this.performDrag.bind(_this)), switchMapTo(_this.draggable.kendo.release)).subscribe(_this.drop.bind(_this));
        }));
    };
    DraggableColumnDirective.prototype.ngOnDestroy = function () {
        if (this.subscriptions) {
            this.subscriptions.unsubscribe();
        }
    };
    DraggableColumnDirective.prototype.drop = function (upEvent) {
        this.hint.remove();
        this.cue.remove();
        this.service.notifyDrop(this, upEvent);
    };
    DraggableColumnDirective.prototype.performDrag = function (_a) {
        var move = _a.move;
        this.hint.move(move);
        var cursorElement = this.elementUnderCursor(move.originalEvent);
        if (cursorElement) {
            this.service.notifyDrag(this, cursorElement, move);
        }
        this.drag.emit({
            draggable: this,
            mouseEvent: move
        });
    };
    DraggableColumnDirective.prototype.elementUnderCursor = function (mouseEvent) {
        this.hint.hide();
        var target = elementUnderCursor(mouseEvent);
        if (target && /k-grouping-dropclue/.test(target.className)) {
            target = hideThenShow(target, elementUnderCursor.bind(this, mouseEvent));
        }
        this.hint.show();
        return target;
    };
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], DraggableColumnDirective.prototype, "context", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Boolean),
        tslib_1.__metadata("design:paramtypes", [Boolean])
    ], DraggableColumnDirective.prototype, "kendoDraggableColumn", null);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], DraggableColumnDirective.prototype, "drag", void 0);
    DraggableColumnDirective = tslib_1.__decorate([
        Directive({
            selector: '[kendoDraggableColumn]'
        }),
        tslib_1.__param(0, Host()),
        tslib_1.__metadata("design:paramtypes", [DraggableDirective,
            ElementRef,
            NgZone,
            DragAndDropService,
            DragHintService,
            DropCueService,
            NavigationService])
    ], DraggableColumnDirective);
    return DraggableColumnDirective;
}());
export { DraggableColumnDirective };
