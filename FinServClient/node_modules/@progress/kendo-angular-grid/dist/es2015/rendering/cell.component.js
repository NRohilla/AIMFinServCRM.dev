import * as tslib_1 from "tslib";
import { Component, HostBinding, Input, Inject, Optional } from '@angular/core';
import { EditService } from '../editing/edit.service';
import { ColumnBase } from '../columns/column-base';
import { CommandColumnComponent } from '../columns/command-column.component';
import { isColumnComponent } from '../columns/column.component';
import { isPresent, isNullOrEmptyString, extractFormat } from '../utils';
import { CELL_CONTEXT } from './common/cell-context';
/**
 * @hidden
 */
let CellComponent = class CellComponent {
    constructor(editService, cellContext) {
        this.editService = editService;
        this.cellContext = cellContext;
        this.isNew = false;
        this._templateContext = {};
    }
    get commandCellClass() {
        return this.isCommand(this.column);
    }
    set rowIndex(index) {
        this._rowIndex = index;
        this.updateCellContext();
    }
    get rowIndex() {
        return this._rowIndex;
    }
    get isEdited() {
        if (!this.isColumnEditable) {
            return false;
        }
        const editContext = this.editService.columnContext(this.rowIndex, this.column);
        return this.isFieldEditable(editContext, this.column);
    }
    get formGroup() {
        return this.editService.context(this.rowIndex).group;
    }
    get templateContext() {
        this._templateContext.$implicit = this.formGroup;
        this._templateContext.isNew = this.isNew;
        this._templateContext.column = this.column;
        this._templateContext.dataItem = this.dataItem;
        this._templateContext.formGroup = this.formGroup;
        this._templateContext.rowIndex = this.rowIndex;
        return this._templateContext;
    }
    get format() {
        if (isColumnComponent(this.column) && !isNullOrEmptyString(this.column.format)) {
            return extractFormat(this.column.format);
        }
        return undefined;
    }
    get isColumnEditable() {
        if (!this.column || this.isCommand(this.column)) {
            return false;
        }
        return this.column.editable !== false;
    }
    ngDoCheck() {
        this.updateCellContext();
    }
    editTemplateRef(column) {
        return column.editTemplateRef;
    }
    field(column) {
        return column.field;
    }
    editor(column) {
        return column.editor;
    }
    isCommand(column) {
        return column instanceof CommandColumnComponent;
    }
    isFieldEditable(editContext, column) {
        if (!isPresent(editContext)) {
            return false;
        }
        if (isPresent(column.editTemplate)) {
            return true;
        }
        return isPresent(editContext.group) && isPresent(editContext.group.get(column.field));
    }
    updateCellContext() {
        if (this.cellContext) {
            this.cellContext.rowIndex = this._rowIndex;
        }
    }
};
tslib_1.__decorate([
    HostBinding('class.k-command-cell'),
    tslib_1.__metadata("design:type", Boolean),
    tslib_1.__metadata("design:paramtypes", [])
], CellComponent.prototype, "commandCellClass", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", ColumnBase)
], CellComponent.prototype, "column", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Boolean)
], CellComponent.prototype, "isNew", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number),
    tslib_1.__metadata("design:paramtypes", [Number])
], CellComponent.prototype, "rowIndex", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], CellComponent.prototype, "dataItem", void 0);
CellComponent = tslib_1.__decorate([
    Component({
        selector: '[kendoGridCell]',
        template: `
        <ng-container [ngSwitch]="isEdited">
            <ng-content *ngSwitchCase="false"></ng-content>
            <ng-container *ngSwitchCase="true">
                <ng-template
                    *ngIf="editTemplateRef(column)"
                    [ngTemplateOutlet]="editTemplateRef(column)"
                    [ngTemplateOutletContext]="templateContext">
                </ng-template>
                <ng-container [ngSwitch]="editor(column)" *ngIf="!editTemplateRef(column)">
                    <kendo-numerictextbox
                        *ngSwitchCase="'numeric'"
                        [format]="format"
                        [formControl]="formGroup.get(field(column))"
                        kendoGridFocusable
                    ></kendo-numerictextbox>

                    <kendo-datepicker
                        *ngSwitchCase="'date'"
                        [format]="format"
                        [formControl]="formGroup.get(field(column))"
                        kendoGridFocusable
                    ></kendo-datepicker>

                    <input
                        *ngSwitchCase="'boolean'"
                        type="checkbox"
                        [formControl]="formGroup.get(field(column))"
                        kendoGridFocusable
                    />

                    <input
                        *ngSwitchDefault
                        type="text"
                        class="k-textbox"
                        [formControl]="formGroup.get(field(column))"
                        kendoGridFocusable
                    />
                </ng-container>
            </ng-container>
        </ng-container>
    `
    }),
    tslib_1.__param(1, Optional()), tslib_1.__param(1, Inject(CELL_CONTEXT)),
    tslib_1.__metadata("design:paramtypes", [EditService, Object])
], CellComponent);
export { CellComponent };
