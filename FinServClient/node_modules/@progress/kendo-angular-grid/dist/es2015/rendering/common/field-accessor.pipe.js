import * as tslib_1 from "tslib";
/* tslint:disable:pipe-naming */
import { Pipe } from '@angular/core';
import { getter } from '@progress/kendo-data-query';
import { isNullOrEmptyString, isPresent } from '../../utils';
import { IntlService } from '@progress/kendo-angular-intl';
/**
 * @hidden
 */
let FieldAccessorPipe = class FieldAccessorPipe {
    constructor(intlService) {
        this.intlService = intlService;
    }
    transform(dataItem, fieldName, format = "", safe = true) {
        if (!isNullOrEmptyString(fieldName)) {
            const value = getter(fieldName, safe)(dataItem);
            if (isPresent(value) && !isNullOrEmptyString(format)) {
                return this.intlService.format(format, value);
            }
            return value;
        }
        return dataItem;
    }
};
FieldAccessorPipe = tslib_1.__decorate([
    Pipe({
        name: 'valueOf',
        pure: false
    }),
    tslib_1.__metadata("design:paramtypes", [IntlService])
], FieldAccessorPipe);
export { FieldAccessorPipe };
