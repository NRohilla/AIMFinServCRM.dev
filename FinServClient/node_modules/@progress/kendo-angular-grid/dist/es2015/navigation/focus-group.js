import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { FocusRoot } from './focus-root';
/**
 * @hidden
 */
let FocusGroup = class FocusGroup {
    constructor(root) {
        this.root = root;
        this.active = true;
        this.children = [];
        this.root.registerGroup(this);
    }
    get focusableChildren() {
        return this.children.filter(el => el.canFocus());
    }
    get isActive() {
        return this.active;
    }
    ngOnDestroy() {
        this.root.unregisterGroup(this);
    }
    registerElement(element) {
        this.unregisterElement(element);
        this.children.push(element);
    }
    unregisterElement(element) {
        this.children = this.children.filter(f => f !== element);
    }
    /**
     * Returns a boolean value indicating if the group should receive focus when the cell is focused.
     *
     * The condition is to have a single "simple" focusable element such as a button or a checkbox.
     */
    isNavigable() {
        const focusable = this.focusableChildren;
        return focusable.length === 1 && focusable[0].isNavigable();
    }
    canFocus() {
        return this.focusableChildren.length > 0;
    }
    focus() {
        if (this.canFocus() && !this.hasFocus()) {
            this.focusableChildren[0].focus();
        }
    }
    activate() {
        this.toggleState(true);
    }
    deactivate() {
        this.toggleState(false);
    }
    hasFocus() {
        return this.children.reduce((focused, element) => focused || element.hasFocus(), false);
    }
    toggleState(value) {
        if (this.active !== value) {
            this.active = value;
            this.children.forEach(f => f.updateState());
        }
    }
};
FocusGroup = tslib_1.__decorate([
    Injectable(),
    tslib_1.__metadata("design:paramtypes", [FocusRoot])
], FocusGroup);
export { FocusGroup };
