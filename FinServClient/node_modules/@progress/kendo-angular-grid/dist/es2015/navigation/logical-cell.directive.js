import * as tslib_1 from "tslib";
import { Directive, ElementRef, HostBinding, Inject, Input, Optional, Renderer2 } from '@angular/core';
import { ColumnInfoService } from '../common/column-info.service';
import { IdService } from '../common/id.service';
import { CELL_CONTEXT } from '../rendering/common/cell-context';
import { FocusGroup } from './focus-group';
import { FocusRoot } from './focus-root';
import { NavigationService } from './navigation.service';
/**
 * @hidden
 */
export function WhenEnabled() {
    return (target, propertyKey) => {
        const method = target[propertyKey];
        target[propertyKey] = (...args) => {
            if (target.navigationService.enabled) {
                method.apply(target, args);
            }
        };
    };
}
/**
 * @hidden
 */
let LogicalCellDirective = class LogicalCellDirective {
    constructor(focusGroup, element, columnInfoService, idService, navigationService, renderer, cellContext) {
        this.focusGroup = focusGroup;
        this.element = element;
        this.columnInfoService = columnInfoService;
        this.idService = idService;
        this.navigationService = navigationService;
        this.renderer = renderer;
        this.cellContext = cellContext;
        this.logicalSlaveCell = false;
    }
    get id() {
        if (!this.logicalSlaveCell && this.columnInfoService.isLocked) {
            return this.idService.cellId(this.logicalRowIndex, this.logicalColIndex);
        }
    }
    get ariaColIndex() {
        if (this.logicalSlaveCell) {
            return undefined;
        }
        return this.logicalColIndex + 1;
    }
    ngOnInit() {
        this.register();
        this.updateElement();
        this.navigationChange = this.navigationService.changes.subscribe((e) => this.onNavigationChange(e));
    }
    ngDoCheck() {
        if (this.cellContext) {
            this.cellContext.focusGroup = this.focusGroup;
        }
    }
    ngOnChanges(changes) {
        const rowIndexChanged = changes.logicalRowIndex && !changes.logicalRowIndex.firstChange;
        const colIndexChanged = changes.logicalColIndex && !changes.logicalColIndex.firstChange;
        if (rowIndexChanged || colIndexChanged) {
            this.register();
            this.updateElement();
        }
    }
    ngOnDestroy() {
        if (this.navigationChange) {
            this.navigationChange.unsubscribe();
        }
    }
    onNavigationChange(e) {
        const active = this.logicalColIndex === e.colIndex && this.logicalRowIndex === e.rowIndex;
        const wasActive = this.logicalColIndex === e.prevColIndex && this.logicalRowIndex === e.prevRowIndex;
        if (active || wasActive) {
            this.updateElement();
        }
    }
    updateElement() {
        const el = this.element.nativeElement;
        this.renderer.setAttribute(el, 'tabIndex', this.isFocusable() ? '0' : '-1');
        if (this.isFocused()) {
            if (this.focusGroup.isNavigable()) {
                this.focusGroup.focus();
            }
            else {
                el.focus();
                this.renderer.addClass(el, 'k-state-focused');
            }
        }
        else {
            this.renderer.removeClass(el, 'k-state-focused');
        }
    }
    register() {
        if (!this.logicalSlaveCell) {
            this.navigationService.registerCell(this);
        }
    }
    isFocusable() {
        return this.navigationService.isCellFocusable(this);
    }
    isFocused() {
        return this.navigationService.isCellFocused(this);
    }
};
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number)
], LogicalCellDirective.prototype, "logicalColIndex", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number)
], LogicalCellDirective.prototype, "logicalRowIndex", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Boolean)
], LogicalCellDirective.prototype, "logicalSlaveCell", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number)
], LogicalCellDirective.prototype, "colSpan", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number)
], LogicalCellDirective.prototype, "rowSpan", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], LogicalCellDirective.prototype, "groupItem", void 0);
tslib_1.__decorate([
    HostBinding('attr.id'),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [])
], LogicalCellDirective.prototype, "id", null);
tslib_1.__decorate([
    HostBinding('attr.aria-colindex'),
    tslib_1.__metadata("design:type", Number),
    tslib_1.__metadata("design:paramtypes", [])
], LogicalCellDirective.prototype, "ariaColIndex", null);
tslib_1.__decorate([
    WhenEnabled(),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", []),
    tslib_1.__metadata("design:returntype", void 0)
], LogicalCellDirective.prototype, "ngOnInit", null);
tslib_1.__decorate([
    WhenEnabled(),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", []),
    tslib_1.__metadata("design:returntype", void 0)
], LogicalCellDirective.prototype, "ngDoCheck", null);
tslib_1.__decorate([
    WhenEnabled(),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object]),
    tslib_1.__metadata("design:returntype", void 0)
], LogicalCellDirective.prototype, "ngOnChanges", null);
LogicalCellDirective = tslib_1.__decorate([
    Directive({
        providers: [{
                provide: FocusGroup,
                deps: [FocusRoot],
                useClass: FocusGroup
            }],
        selector: '[kendoGridLogicalCell]'
    }),
    tslib_1.__param(6, Optional()), tslib_1.__param(6, Inject(CELL_CONTEXT)),
    tslib_1.__metadata("design:paramtypes", [FocusGroup,
        ElementRef,
        ColumnInfoService,
        IdService,
        NavigationService,
        Renderer2, Object])
], LogicalCellDirective);
export { LogicalCellDirective };
