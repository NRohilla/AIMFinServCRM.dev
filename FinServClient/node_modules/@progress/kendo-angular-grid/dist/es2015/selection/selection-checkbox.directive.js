import * as tslib_1 from "tslib";
/* tslint:disable:no-input-rename */
import { Directive, HostBinding, ElementRef, Input, Renderer2 } from '@angular/core';
import { SelectionService } from './selection.service';
/**
 * Represents the row selection checkbox of the Grid.
 * The directive expects the index of the current row as an input parameter. For more information, refer to the example below.
 *
 * Apply the directive to an `input` element inside the
 * [`CheckboxColumnComponent`]({% slug api_grid_checkboxcolumncomponent %}).
 *
 * When the user clicks the checkbox that is associated with the directive,
 * a [`selectionChange`]({% slug api_grid_gridcomponent %}#toc-selectionChange) event is triggered.
 *
 * @example
 * ```ts-no-run
 * <kendo-grid>
 *   <kendo-grid-checkbox-column title="Custom checkbox">
 *     <ng-template kendoGridCellTemplate let-idx="rowIndex">
 *       <input [kendoGridSelectionCheckbox]="idx" />
 *     </ng-template>
 *   </kendo-grid-checkbox-column>
 * </kendo-grid>
 * ```
 */
let SelectionCheckboxDirective = class SelectionCheckboxDirective {
    constructor(selectionService, el, renderer) {
        this.selectionService = selectionService;
        this.el = el;
        this.renderer = renderer;
        this.type = "checkbox";
        this.destroyClick = this.renderer.listen(this.el.nativeElement, "click", this.onClick.bind(this));
    }
    ngAfterContentChecked() {
        this.setCheckedState();
    }
    ngOnDestroy() {
        if (this.destroyClick) {
            this.destroyClick();
        }
    }
    /**
     * @hidden
     */
    onClick() {
        if (this.selectionService.options.enabled) {
            let ev = this.selectionService.toggleByIndex(this.itemIndex);
            ev.ctrlKey = true;
            //Setting the deprecated `index` and `selected` properties
            ev.index = this.itemIndex;
            ev.selected = ev.selectedRows.length > ev.deselectedRows.length;
            this.selectionService.changes.emit(ev);
        }
    }
    /*
     * @hidden
     */
    setCheckedState() {
        this.renderer.setProperty(this.el.nativeElement, "checked", this.selectionService.isSelected(this.itemIndex));
    }
};
tslib_1.__decorate([
    Input("kendoGridSelectionCheckbox"),
    tslib_1.__metadata("design:type", Number)
], SelectionCheckboxDirective.prototype, "itemIndex", void 0);
tslib_1.__decorate([
    HostBinding('attr.type'),
    tslib_1.__metadata("design:type", String)
], SelectionCheckboxDirective.prototype, "type", void 0);
SelectionCheckboxDirective = tslib_1.__decorate([
    Directive({
        selector: '[kendoGridSelectionCheckbox]'
    }),
    tslib_1.__metadata("design:paramtypes", [SelectionService,
        ElementRef,
        Renderer2])
], SelectionCheckboxDirective);
export { SelectionCheckboxDirective };
