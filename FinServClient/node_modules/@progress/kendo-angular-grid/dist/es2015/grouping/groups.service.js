import * as tslib_1 from "tslib";
import { Injectable, Optional, Inject } from '@angular/core';
import { ExpandStateService } from '../common/expand-state.service';
import { Skip } from "../utils";
const removeLast = groupIndex => groupIndex.lastIndexOf("_") > -1
    ? groupIndex.slice(0, groupIndex.lastIndexOf("_"))
    : "";
/**
 * @hidden
 */
let GroupsService = class GroupsService extends ExpandStateService {
    constructor(isCollapsed = false) {
        super(isCollapsed);
    }
    isInExpandedGroup(groupIndex, skipSelf = true) {
        if (skipSelf) {
            groupIndex = removeLast(groupIndex);
        }
        let expanded = true;
        while (groupIndex && expanded) {
            expanded = this.isExpanded(groupIndex);
            groupIndex = removeLast(groupIndex);
        }
        return expanded;
    }
    expandChildren(groupIndex) {
        this.rowState = this.rowState.filter((x) => !x.startsWith(groupIndex));
    }
};
GroupsService = tslib_1.__decorate([
    Injectable(),
    tslib_1.__param(0, Optional()), tslib_1.__param(0, Inject(Skip)),
    tslib_1.__metadata("design:paramtypes", [Boolean])
], GroupsService);
export { GroupsService };
