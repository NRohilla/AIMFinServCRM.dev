import * as tslib_1 from "tslib";
import { Component, Input, HostBinding } from '@angular/core';
import { GroupsService } from './groups.service';
import { GroupInfoService } from './group-info.service';
import { columnsSpan } from "../columns/column-common";
/**
 * @hidden
 */
let GroupHeaderComponent = class GroupHeaderComponent {
    constructor(groupsService, groupInfoService) {
        this.groupsService = groupsService;
        this.groupInfoService = groupInfoService;
        this.skipGroupDecoration = false;
        this.hasDetails = false;
        this.totalColumnsCount = 0;
        this.columns = [];
        this.groups = [];
    }
    get groupItemClass() {
        return true;
    }
    prefixGroupCell(item) {
        return new Array(item.level);
    }
    toggleGroup(item) {
        this.groupsService.toggleRow(item.index, item.data);
        return false;
    }
    groupSpan(item) {
        let columnCount = columnsSpan(this.columns);
        if (this.skipGroupDecoration) {
            return columnCount;
        }
        const groupCount = (this.groups || []).length;
        if (this.hasDetails) {
            columnCount++;
        }
        return groupCount + columnCount - item.level;
    }
    logicalColSpan() {
        return this.skipGroupDecoration ? 1 : this.totalColumnsCount;
    }
    ariaRole() {
        if (this.skipGroupDecoration) {
            return 'presentation';
        }
    }
    groupButtonStyles(groupIndex) {
        const expanded = this.groupsService.isExpanded(groupIndex);
        return { 'k-i-collapse': expanded, 'k-i-expand': !expanded, 'k-icon': true };
    }
    formatForGroup(item) {
        return this.groupInfoService.formatForGroup(item);
    }
    groupTitle(item) {
        return this.groupInfoService.groupTitle(item);
    }
    groupHeaderTemplate(item) {
        return this.groupInfoService.groupHeaderTemplate(item);
    }
};
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number)
], GroupHeaderComponent.prototype, "rowIndex", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number)
], GroupHeaderComponent.prototype, "logicalRowIndex", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], GroupHeaderComponent.prototype, "item", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Boolean)
], GroupHeaderComponent.prototype, "skipGroupDecoration", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Boolean)
], GroupHeaderComponent.prototype, "hasDetails", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number)
], GroupHeaderComponent.prototype, "totalColumnsCount", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Array)
], GroupHeaderComponent.prototype, "columns", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Array)
], GroupHeaderComponent.prototype, "groups", void 0);
tslib_1.__decorate([
    HostBinding('class.k-grouping-row'),
    tslib_1.__metadata("design:type", Boolean),
    tslib_1.__metadata("design:paramtypes", [])
], GroupHeaderComponent.prototype, "groupItemClass", null);
GroupHeaderComponent = tslib_1.__decorate([
    Component({
        selector: '[kendoGridGroupHeader]',
        template: `
        <ng-template [ngIf]="!skipGroupDecoration">
            <td [class.k-group-cell]="true"
                role="presentation"
                *ngFor="let g of prefixGroupCell(item)"></td>
        </ng-template>
        <td [attr.colspan]="groupSpan(item)"
            [attr.role]="ariaRole()"
            kendoGridLogicalCell [logicalRowIndex]="logicalRowIndex"
                                 [logicalColIndex]="0"
                                 [logicalSlaveCell]="skipGroupDecoration"
                                 [groupItem]="item"
                                 [colSpan]="logicalColSpan()">
            <p class="k-reset">
                <ng-template [ngIf]="!skipGroupDecoration">
                    <a href="#" tabindex="-1" (click)="toggleGroup(item)"
                        [ngClass]="groupButtonStyles(item.index)">
                    </a>
                    <ng-template [ngIf]="!groupHeaderTemplate(item)">
                    {{groupTitle(item)}}: {{item.data | valueOf:"value": formatForGroup(item)}}
                    </ng-template>
                    <ng-template
                        [templateContext]="{
                            templateRef: groupHeaderTemplate(item),
                            group: item.data,
                            aggregates: item.data?.aggregates,
                            value: item.data?.value,
                            field: item.data?.field,
                            $implicit: item.data
                            }">
                    </ng-template>
                </ng-template>
            </p>
        </td>
    `
    }),
    tslib_1.__metadata("design:paramtypes", [GroupsService,
        GroupInfoService])
], GroupHeaderComponent);
export { GroupHeaderComponent };
