import * as tslib_1 from "tslib";
import { Input, ContentChild, ContentChildren, QueryList } from '@angular/core';
import { HeaderTemplateDirective } from '../rendering/header/header-template.directive';
import { FooterTemplateDirective } from '../rendering/footer/footer-template.directive';
/**
 * @hidden
 */
export const isSpanColumn = column => column.isSpanColumn;
/**
 * @hidden
 */
export const isCheckboxColumn = column => column.isCheckboxColumn;
const isColumnContainer = column => column.isColumnGroup || isSpanColumn(column);
/**
 * @hidden
 */
export class ColumnBase {
    constructor(parent) {
        this.parent = parent;
        this.orderIndex = 0;
        /**
         * @hidden
         */
        this.isColumnGroup = false;
        /**
         * @hidden
         */
        this.isSpanColumn = false;
        /**
         * Indicates whether the column is resizable or not.
         * @default true
         */
        this.resizable = true;
        /**
         * Indicates whether the column is reorderable or not.
         * @default true
         */
        this.reorderable = true;
        /**
         * The width (in pixels) below which the user is not able to resize the column by using the UI.
         */
        this.minResizableWidth = 10;
        /**
         * @hidden
         */
        this.headerTemplates = new QueryList();
        if (parent && !isColumnContainer(parent)) {
            throw new Error('Columns can be nested only inside ColumnGroupComponent');
        }
    }
    /**
     * The width of the column (in pixels).
     */
    set width(value) {
        this._width = parseInt(value, 10);
    }
    get width() { return this._width; }
    /**
     * @hidden
     */
    get level() {
        if (this.parent && isSpanColumn(this.parent)) {
            return this.parent.level;
        }
        return this.parent ? this.parent.level + 1 : 0;
    }
    /**
     * @hidden
     */
    get isLocked() {
        return this.parent ? this.parent.isLocked : this.locked;
    }
    /**
     * @hidden
     */
    get colspan() {
        return 1;
    }
    /**
     * @hidden
     */
    rowspan(totalColumnLevels) {
        return this.level < totalColumnLevels ? (totalColumnLevels - this.level) + 1 : 1;
    }
    /**
     * @hidden
     */
    get headerTemplateRef() {
        const template = this.headerTemplates.first;
        return template ? template.templateRef : undefined;
    }
    /**
     * @hidden
     */
    get footerTemplateRef() {
        return this.footerTemplate ? this.footerTemplate.templateRef : undefined;
    }
    get displayTitle() {
        return this.title;
    }
}
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Boolean)
], ColumnBase.prototype, "resizable", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Boolean)
], ColumnBase.prototype, "reorderable", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number)
], ColumnBase.prototype, "minResizableWidth", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String)
], ColumnBase.prototype, "title", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number),
    tslib_1.__metadata("design:paramtypes", [Number])
], ColumnBase.prototype, "width", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Boolean)
], ColumnBase.prototype, "locked", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Boolean)
], ColumnBase.prototype, "hidden", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String)
], ColumnBase.prototype, "media", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], ColumnBase.prototype, "style", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], ColumnBase.prototype, "headerStyle", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], ColumnBase.prototype, "footerStyle", void 0);
tslib_1.__decorate([
    Input('class'),
    tslib_1.__metadata("design:type", Object)
], ColumnBase.prototype, "cssClass", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], ColumnBase.prototype, "headerClass", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], ColumnBase.prototype, "footerClass", void 0);
tslib_1.__decorate([
    ContentChildren(HeaderTemplateDirective, { descendants: false }),
    tslib_1.__metadata("design:type", QueryList)
], ColumnBase.prototype, "headerTemplates", void 0);
tslib_1.__decorate([
    ContentChild(FooterTemplateDirective),
    tslib_1.__metadata("design:type", FooterTemplateDirective)
], ColumnBase.prototype, "footerTemplate", void 0);
