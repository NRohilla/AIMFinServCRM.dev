'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var proxy = function (a, b) { return function (e) { return b(a(e)); }; };

var bind = function (el, event, callback) { return el.addEventListener && el.addEventListener(event, callback); };

var unbind = function (el, event, callback) { return el.removeEventListener && el.removeEventListener(event, callback); };

var noop = function () { /* empty */ };

var touchRegExp = /touch/;

// 300ms is the usual mouse interval;
// // However, an underpowered mobile device under a heavy load may queue mouse events for a longer period.
var IGNORE_MOUSE_TIMEOUT = 2000;

function normalizeEvent(e) {
    if (e.type.match(touchRegExp)) {
        return {
            pageX: e.changedTouches[0].pageX,
            pageY: e.changedTouches[0].pageY,
            type: e.type,
            originalEvent: e
        };
    }

    return {
        pageX: e.pageX,
        pageY: e.pageY,
        offsetX: e.offsetX,
        offsetY: e.offsetY,
        type: e.type,
        ctrlKey: e.ctrlKey,
        shiftKey: e.shiftKey,
        altKey: e.altKey,
        originalEvent: e
    };
}

var Draggable = function Draggable(ref) {
    var this$1 = this;
    var press = ref.press; if ( press === void 0 ) press = noop;
    var drag = ref.drag; if ( drag === void 0 ) drag = noop;
    var release = ref.release; if ( release === void 0 ) release = noop;

    this._pressHandler = proxy(normalizeEvent, press);
    this._dragHandler = proxy(normalizeEvent, drag);
    this._releaseHandler = proxy(normalizeEvent, release);
    this._ignoreMouse = false;
    this._touchAction;

    this._touchstart = function (e) {
        if (e.touches.length === 1) {
            this$1._pressHandler(e);
        }
    };

    this._touchmove = function (e) {
        if (e.touches.length === 1) {
            this$1._dragHandler(e);
        }
    };

    this._touchend = function (e) {
        // the last finger has been lifted, and the user is not doing gesture.
        // there might be a better way to handle this.
        if (e.touches.length === 0 && e.changedTouches.length === 1) {
            this$1._releaseHandler(e);
            this$1._ignoreMouse = true;
            setTimeout(this$1._restoreMouse, IGNORE_MOUSE_TIMEOUT);
        }
    };

    this._restoreMouse = function () {
        this$1._ignoreMouse = false;
    };

    this._mousedown = function (e) {
        var which = e.which;

        if ((which && which > 1) || this$1._ignoreMouse) {
            return;
        }

        bind(document, "mousemove", this$1._mousemove);
        bind(document, "mouseup", this$1._mouseup);
        this$1._pressHandler(e);
    };

    this._mousemove = function (e) {
        this$1._dragHandler(e);
    };

    this._mouseup = function (e) {
        unbind(document, "mousemove", this$1._mousemove);
        unbind(document, "mouseup", this$1._mouseup);
        this$1._releaseHandler(e);
    };

    this._pointerdown = function (e) {
        if (e.isPrimary) {
            bind(this$1._element, "pointermove", this$1._pointermove);
            this$1._touchAction = e.target.style.touchAction;
            e.target.style.touchAction = "none";
            e.target.setPointerCapture(e.pointerId);
            this$1._pressHandler(e);
        }
    };

    this._pointermove = function (e) {
        if (e.isPrimary) {
            this$1._dragHandler(e);
        }
    };

    this._pointerup = function (e) {
        if (e.isPrimary) {
            unbind(this$1._element, "pointermove", this$1._pointermove);
            e.target.style.touchAction = this$1._touchAction;
            e.target.releasePointerCapture(e.pointerId);
            this$1._releaseHandler(e);
        }
    };
};

Draggable.supportPointerEvent = function supportPointerEvent () {
    return window.PointerEvent;
};

Draggable.prototype.bindTo = function bindTo (element) {
    if (element === this._element) {
        return;
    }

    if (this._element) {
        this._unbindFromCurrent();
    }

    this._element = element;

    if (Draggable.supportPointerEvent()) {
        bind(element, "pointerdown", this._pointerdown);
        bind(element, "pointerup", this._pointerup);
    } else {
        bind(element, "mousedown", this._mousedown);
        bind(element, "touchstart", this._touchstart);
        bind(element, "touchmove", this._touchmove);
        bind(element, "touchend", this._touchend);
    }
};

Draggable.prototype._unbindFromCurrent = function _unbindFromCurrent () {
    if (Draggable.supportPointerEvent()) {
        unbind(this._element, "pointerdown", this._pointerdown);
        unbind(this._element, "pointermove", this._pointermove);
        unbind(this._element, "pointerup", this._pointerup);
    } else {
        unbind(this._element, "mousedown", this._mousedown);
        unbind(this._element, "touchstart", this._touchstart);
        unbind(this._element, "touchmove", this._touchmove);
        unbind(this._element, "touchend", this._touchend);
    }
};

Draggable.prototype.destroy = function destroy () {
    this._unbindFromCurrent();
    this._element = null;
};

exports.Draggable = Draggable;
exports['default'] = Draggable;

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjpudWxsLCJzb3VyY2VzIjpbIi9ob21lL3RyYXZpcy9idWlsZC90ZWxlcmlrL2tlbmRvLWRyYWdnYWJsZS9zcmMvbWFpbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBwcm94eSA9IChhLCBiKSA9PiAoZSkgPT4gYihhKGUpKTtcblxuY29uc3QgYmluZCA9IChlbCwgZXZlbnQsIGNhbGxiYWNrKSA9PlxuICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIgJiYgZWwuYWRkRXZlbnRMaXN0ZW5lcihldmVudCwgY2FsbGJhY2spO1xuXG5jb25zdCB1bmJpbmQgPSAoZWwsIGV2ZW50LCBjYWxsYmFjaykgPT5cbiAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyICYmIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnQsIGNhbGxiYWNrKTtcblxuY29uc3Qgbm9vcCA9ICgpID0+IHsgLyogZW1wdHkgKi8gfTtcblxuY29uc3QgdG91Y2hSZWdFeHAgPSAvdG91Y2gvO1xuXG4vLyAzMDBtcyBpcyB0aGUgdXN1YWwgbW91c2UgaW50ZXJ2YWw7XG4vLyAvLyBIb3dldmVyLCBhbiB1bmRlcnBvd2VyZWQgbW9iaWxlIGRldmljZSB1bmRlciBhIGhlYXZ5IGxvYWQgbWF5IHF1ZXVlIG1vdXNlIGV2ZW50cyBmb3IgYSBsb25nZXIgcGVyaW9kLlxuY29uc3QgSUdOT1JFX01PVVNFX1RJTUVPVVQgPSAyMDAwO1xuXG5mdW5jdGlvbiBub3JtYWxpemVFdmVudChlKSB7XG4gICAgaWYgKGUudHlwZS5tYXRjaCh0b3VjaFJlZ0V4cCkpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHBhZ2VYOiBlLmNoYW5nZWRUb3VjaGVzWzBdLnBhZ2VYLFxuICAgICAgICAgICAgcGFnZVk6IGUuY2hhbmdlZFRvdWNoZXNbMF0ucGFnZVksXG4gICAgICAgICAgICB0eXBlOiBlLnR5cGUsXG4gICAgICAgICAgICBvcmlnaW5hbEV2ZW50OiBlXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgcGFnZVg6IGUucGFnZVgsXG4gICAgICAgIHBhZ2VZOiBlLnBhZ2VZLFxuICAgICAgICBvZmZzZXRYOiBlLm9mZnNldFgsXG4gICAgICAgIG9mZnNldFk6IGUub2Zmc2V0WSxcbiAgICAgICAgdHlwZTogZS50eXBlLFxuICAgICAgICBjdHJsS2V5OiBlLmN0cmxLZXksXG4gICAgICAgIHNoaWZ0S2V5OiBlLnNoaWZ0S2V5LFxuICAgICAgICBhbHRLZXk6IGUuYWx0S2V5LFxuICAgICAgICBvcmlnaW5hbEV2ZW50OiBlXG4gICAgfTtcbn1cblxuZXhwb3J0IGNsYXNzIERyYWdnYWJsZSB7XG4gICAgc3RhdGljIHN1cHBvcnRQb2ludGVyRXZlbnQoKSB7XG4gICAgICAgIHJldHVybiB3aW5kb3cuUG9pbnRlckV2ZW50O1xuICAgIH1cblxuICAgIGNvbnN0cnVjdG9yKHsgcHJlc3MgPSBub29wLCBkcmFnID0gbm9vcCwgcmVsZWFzZSA9IG5vb3AgfSkge1xuICAgICAgICB0aGlzLl9wcmVzc0hhbmRsZXIgPSBwcm94eShub3JtYWxpemVFdmVudCwgcHJlc3MpO1xuICAgICAgICB0aGlzLl9kcmFnSGFuZGxlciA9IHByb3h5KG5vcm1hbGl6ZUV2ZW50LCBkcmFnKTtcbiAgICAgICAgdGhpcy5fcmVsZWFzZUhhbmRsZXIgPSBwcm94eShub3JtYWxpemVFdmVudCwgcmVsZWFzZSk7XG4gICAgICAgIHRoaXMuX2lnbm9yZU1vdXNlID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX3RvdWNoQWN0aW9uO1xuXG4gICAgICAgIHRoaXMuX3RvdWNoc3RhcnQgPSAoZSkgPT4ge1xuICAgICAgICAgICAgaWYgKGUudG91Y2hlcy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9wcmVzc0hhbmRsZXIoZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy5fdG91Y2htb3ZlID0gKGUpID0+IHtcbiAgICAgICAgICAgIGlmIChlLnRvdWNoZXMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fZHJhZ0hhbmRsZXIoZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy5fdG91Y2hlbmQgPSAoZSkgPT4ge1xuICAgICAgICAgICAgLy8gdGhlIGxhc3QgZmluZ2VyIGhhcyBiZWVuIGxpZnRlZCwgYW5kIHRoZSB1c2VyIGlzIG5vdCBkb2luZyBnZXN0dXJlLlxuICAgICAgICAgICAgLy8gdGhlcmUgbWlnaHQgYmUgYSBiZXR0ZXIgd2F5IHRvIGhhbmRsZSB0aGlzLlxuICAgICAgICAgICAgaWYgKGUudG91Y2hlcy5sZW5ndGggPT09IDAgJiYgZS5jaGFuZ2VkVG91Y2hlcy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9yZWxlYXNlSGFuZGxlcihlKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9pZ25vcmVNb3VzZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgc2V0VGltZW91dCh0aGlzLl9yZXN0b3JlTW91c2UsIElHTk9SRV9NT1VTRV9USU1FT1VUKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLl9yZXN0b3JlTW91c2UgPSAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLl9pZ25vcmVNb3VzZSA9IGZhbHNlO1xuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMuX21vdXNlZG93biA9IChlKSA9PiB7XG4gICAgICAgICAgICBjb25zdCB7IHdoaWNoIH0gPSBlO1xuXG4gICAgICAgICAgICBpZiAoKHdoaWNoICYmIHdoaWNoID4gMSkgfHwgdGhpcy5faWdub3JlTW91c2UpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGJpbmQoZG9jdW1lbnQsIFwibW91c2Vtb3ZlXCIsIHRoaXMuX21vdXNlbW92ZSk7XG4gICAgICAgICAgICBiaW5kKGRvY3VtZW50LCBcIm1vdXNldXBcIiwgdGhpcy5fbW91c2V1cCk7XG4gICAgICAgICAgICB0aGlzLl9wcmVzc0hhbmRsZXIoZSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy5fbW91c2Vtb3ZlID0gKGUpID0+IHtcbiAgICAgICAgICAgIHRoaXMuX2RyYWdIYW5kbGVyKGUpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMuX21vdXNldXAgPSAoZSkgPT4ge1xuICAgICAgICAgICAgdW5iaW5kKGRvY3VtZW50LCBcIm1vdXNlbW92ZVwiLCB0aGlzLl9tb3VzZW1vdmUpO1xuICAgICAgICAgICAgdW5iaW5kKGRvY3VtZW50LCBcIm1vdXNldXBcIiwgdGhpcy5fbW91c2V1cCk7XG4gICAgICAgICAgICB0aGlzLl9yZWxlYXNlSGFuZGxlcihlKTtcbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLl9wb2ludGVyZG93biA9IChlKSA9PiB7XG4gICAgICAgICAgICBpZiAoZS5pc1ByaW1hcnkpIHtcbiAgICAgICAgICAgICAgICBiaW5kKHRoaXMuX2VsZW1lbnQsIFwicG9pbnRlcm1vdmVcIiwgdGhpcy5fcG9pbnRlcm1vdmUpO1xuICAgICAgICAgICAgICAgIHRoaXMuX3RvdWNoQWN0aW9uID0gZS50YXJnZXQuc3R5bGUudG91Y2hBY3Rpb247XG4gICAgICAgICAgICAgICAgZS50YXJnZXQuc3R5bGUudG91Y2hBY3Rpb24gPSBcIm5vbmVcIjtcbiAgICAgICAgICAgICAgICBlLnRhcmdldC5zZXRQb2ludGVyQ2FwdHVyZShlLnBvaW50ZXJJZCk7XG4gICAgICAgICAgICAgICAgdGhpcy5fcHJlc3NIYW5kbGVyKGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMuX3BvaW50ZXJtb3ZlID0gKGUpID0+IHtcbiAgICAgICAgICAgIGlmIChlLmlzUHJpbWFyeSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2RyYWdIYW5kbGVyKGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMuX3BvaW50ZXJ1cCA9IChlKSA9PiB7XG4gICAgICAgICAgICBpZiAoZS5pc1ByaW1hcnkpIHtcbiAgICAgICAgICAgICAgICB1bmJpbmQodGhpcy5fZWxlbWVudCwgXCJwb2ludGVybW92ZVwiLCB0aGlzLl9wb2ludGVybW92ZSk7XG4gICAgICAgICAgICAgICAgZS50YXJnZXQuc3R5bGUudG91Y2hBY3Rpb24gPSB0aGlzLl90b3VjaEFjdGlvbjtcbiAgICAgICAgICAgICAgICBlLnRhcmdldC5yZWxlYXNlUG9pbnRlckNhcHR1cmUoZS5wb2ludGVySWQpO1xuICAgICAgICAgICAgICAgIHRoaXMuX3JlbGVhc2VIYW5kbGVyKGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH1cblxuICAgIGJpbmRUbyhlbGVtZW50KSB7XG4gICAgICAgIGlmIChlbGVtZW50ID09PSB0aGlzLl9lbGVtZW50KSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5fZWxlbWVudCkge1xuICAgICAgICAgICAgdGhpcy5fdW5iaW5kRnJvbUN1cnJlbnQoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX2VsZW1lbnQgPSBlbGVtZW50O1xuXG4gICAgICAgIGlmIChEcmFnZ2FibGUuc3VwcG9ydFBvaW50ZXJFdmVudCgpKSB7XG4gICAgICAgICAgICBiaW5kKGVsZW1lbnQsIFwicG9pbnRlcmRvd25cIiwgdGhpcy5fcG9pbnRlcmRvd24pO1xuICAgICAgICAgICAgYmluZChlbGVtZW50LCBcInBvaW50ZXJ1cFwiLCB0aGlzLl9wb2ludGVydXApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYmluZChlbGVtZW50LCBcIm1vdXNlZG93blwiLCB0aGlzLl9tb3VzZWRvd24pO1xuICAgICAgICAgICAgYmluZChlbGVtZW50LCBcInRvdWNoc3RhcnRcIiwgdGhpcy5fdG91Y2hzdGFydCk7XG4gICAgICAgICAgICBiaW5kKGVsZW1lbnQsIFwidG91Y2htb3ZlXCIsIHRoaXMuX3RvdWNobW92ZSk7XG4gICAgICAgICAgICBiaW5kKGVsZW1lbnQsIFwidG91Y2hlbmRcIiwgdGhpcy5fdG91Y2hlbmQpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgX3VuYmluZEZyb21DdXJyZW50KCkge1xuICAgICAgICBpZiAoRHJhZ2dhYmxlLnN1cHBvcnRQb2ludGVyRXZlbnQoKSkge1xuICAgICAgICAgICAgdW5iaW5kKHRoaXMuX2VsZW1lbnQsIFwicG9pbnRlcmRvd25cIiwgdGhpcy5fcG9pbnRlcmRvd24pO1xuICAgICAgICAgICAgdW5iaW5kKHRoaXMuX2VsZW1lbnQsIFwicG9pbnRlcm1vdmVcIiwgdGhpcy5fcG9pbnRlcm1vdmUpO1xuICAgICAgICAgICAgdW5iaW5kKHRoaXMuX2VsZW1lbnQsIFwicG9pbnRlcnVwXCIsIHRoaXMuX3BvaW50ZXJ1cCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB1bmJpbmQodGhpcy5fZWxlbWVudCwgXCJtb3VzZWRvd25cIiwgdGhpcy5fbW91c2Vkb3duKTtcbiAgICAgICAgICAgIHVuYmluZCh0aGlzLl9lbGVtZW50LCBcInRvdWNoc3RhcnRcIiwgdGhpcy5fdG91Y2hzdGFydCk7XG4gICAgICAgICAgICB1bmJpbmQodGhpcy5fZWxlbWVudCwgXCJ0b3VjaG1vdmVcIiwgdGhpcy5fdG91Y2htb3ZlKTtcbiAgICAgICAgICAgIHVuYmluZCh0aGlzLl9lbGVtZW50LCBcInRvdWNoZW5kXCIsIHRoaXMuX3RvdWNoZW5kKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGRlc3Ryb3koKSB7XG4gICAgICAgIHRoaXMuX3VuYmluZEZyb21DdXJyZW50KCk7XG4gICAgICAgIHRoaXMuX2VsZW1lbnQgPSBudWxsO1xuICAgIH1cbn1cblxuLy8gUm9sbHVwIHdvbid0IG91dHB1dCBleHBvcnRzWydkZWZhdWx0J10gb3RoZXJ3aXNlXG5leHBvcnQgZGVmYXVsdCBEcmFnZ2FibGU7XG5cbiJdLCJuYW1lcyI6WyJjb25zdCIsInRoaXMi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